<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_right_still</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_collision_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Edit me!</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TRY NOT TO CHANGE ANYTHING ON LINE 2 (Below)
came_from="";cantbehit=false;trans86E=false;dead=false;current_room=room;visibl=false;hit=false;right="Right";left="Left";nowhere="Nowhere";up="Up";down="Down";going=nowhere;continuesprite=-1;keysright=false;keysleft=false;freespace="Free space";liquid="Liquid";in=freespace;inwater=false;hitshock=false;going_to_prev_room=false;going_to_next_room=false;


//This variable (Below) is the direction you face at first.
facing=left;

//This variable (Below) is your current speed.
speedx=0;

//This variable (Below) decides the max amount of pixels you can possibly move (on ground) per step.
//WARNING: TRY NOT GIVE THIS VARIABLE A VALUE HIGHER THAN THE PLAYERS BOUNDING BOX WIDTH.
speedxmax=4;

//This variable (Below) decides how long you will take to return to a speed of 0 when not holding any keys.
slip=8;

//This variable (Below) decides how long you will take to reach your max speed when moving.
startup=11;

//This variable (Below) decides how strong the gravity is.
grav=0.6;

//This variable (Below) will tell you which way the player is trying to move. 
//If the value is 1, he's trying to move right, if it's 2, he's trying to move left.
move=0;

//Change these keys (Below) to change your in game controls
keyleft=vk_left;
keyright=vk_right;
keyup=vk_up;
keydown=vk_down;

//This variable (Below) will tell you whether you're on the ground or not.
onground=false;

//This variable (Below) is how fast you can possibly fall
vspeedmax=12;
//This variable (Below) is your jumping speed.
jumpspeed=11;
//This variable (Below) is the players initial score
playerscore=0;

invins_max=90;
invins=0;


//                                                                       \\
//**** THESE VARIABLES (Below) ARE FOR WHEN YOU ENTER AND EXIT WATER ****\\

//This variable (Below) is how much your MAX SPEED will be temporarily divided by when you enter water.
    speeddivide=2;
//This variable (Below) is how much your VSPEED will be divided by when you enter water.
    vspeeddivide=2;
//This variable (Below) is how much your VSPEED will be multiplied by when you exit water.
    hopout=1.2;
//This variable (Below) is how much your GRAVITY will be temporarily divided by when you enter water.
    gravdivide=2; 
//This variable (Below) is how much your JUMP SPEED will be temporarily divided by when you enter water.
    jumpspeeddivide=1.7; 
//This variable (Below) is how much your MAX VSPEED will be temporarily divided by when you enter water.
    maxvspeeddivide=10;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Creating The Camera</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,CAMERA);
view_object=CAMERA;
instance_create(x,y,ScoreOperator);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>EXP and HP</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//                                                \\
//**** THESE VARIABLES (Below) ARE FOR HEALTH ****\\

//This variable (Below) is the highest your HP will ever get.
hpmax=100;

//This variable (Below) is your current health.
hp=hpmax;

//This variable (Below) is how many pixels wide your health will be at max.
hpscale=150;

//                                                    \\
//**** THESE VARIABLES (Below) ARE FOR EXPERIENCE ****\\

//This variable (Below) is the amount of exp you need to reach before a level up (for the first level up)\\
expmax=100;

//This variable (Below) is your current exp.
expcurrent=0;

//This variable (Below) is how many pixels wide your exp will be at max.
expscale=150;

level=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>When the player dies</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp==0&amp;&amp;dead=true)
{
//Type in what you want to happen when he dies.
persistent=true;
//screen_refresh();
if (came_from=right)
    {x=obj_spawn_left.x; y=obj_spawn_left.y; hp=hpmax/2; dead=false;}
if (came_from=left)
    {x=obj_spawn_right.x; y=obj_spawn_right.y; hp=hpmax/2; dead=false;}
if (came_from="")
    {x=obj_first_spawn.x; y=obj_first_spawn.y; hp=hpmax/2; dead=false;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAIN CODE</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0 ){dead=true;}

//YOU DON'T NEED TO BE HERE, GO INTO THE CREATE EVENT AND EDIT VARIABLES
//YOU DON'T NEED TO BE HERE, GO INTO THE CREATE EVENT AND EDIT VARIABLES
//YOU DON'T NEED TO BE HERE, GO INTO THE CREATE EVENT AND EDIT VARIABLES

//Gravity and limiting the vspeed\\
if (place_free(x,y+1)) {gravity=grav;}
else {gravity=0;}
if (vspeed&gt;vspeedmax) {vspeed=vspeedmax;}



//Important keyboard checks to keep the movements smooth.\\
if (keyboard_check_direct(keyright)&amp;&amp;keysright==false) {move=1; keysright=true;}
if (keyboard_check_direct(keyleft )&amp;&amp;keysleft==false)  {move=2; keysleft=true}
if (keyboard_check_direct(keyright)&amp;&amp;!keyboard_check_direct(keyleft )) {move=1;}
if (keyboard_check_direct(keyleft )&amp;&amp;!keyboard_check_direct(keyright)) {move=2;}
if (!keyboard_check_direct(keyright)&amp;&amp;keysright==true) {move=0; keysright=false;}
if (!keyboard_check_direct(keyleft )&amp;&amp;keysleft==true)  {move=0; keysleft=false;}



// Changing the speedx \\
if (!hit)
{if (move==1)            {speedx+=(speedxmax-speedx)/startup}
else if (move==2)       {speedx+=(-speedxmax-speedx)/startup}
if (trans86E=false)
{if (move==0&amp;&amp;speedx!=0) {speedx+=-(speedx/slip)}}
if (speedx&gt;-0.3&amp;&amp;speedx&lt;0.3&amp;&amp;move=0) {speedx=0;}}
if speedx&gt;speedxmax {speedx=speedxmax;}
else if speedx&lt;-speedxmax {speedx=-speedxmax;}

// Jumping \\
if (keyboard_check_pressed(keyup)) 
{
if (!place_free(x,y+1)&amp;&amp;place_free(x,y-1))||(inwater) 
{
vspeed=-jumpspeed; if (inwater) 
{if (facing==right)  {sprite_index=spr_right_swim; image_index=0; image_speed=0.5;}
if (facing==left)   {sprite_index=spr_left_swim;  image_index=0; image_speed=0.5;}}}}

if (keyboard_check_released(keyup)&amp;&amp;going==up) {vspeed/=1.6;}



// Updating direction variables \\
if (speedx&gt;0&amp;&amp;continuesprite=-1&amp;&amp;!hitshock) {facing=right;}
if (speedx&lt;0&amp;&amp;continuesprite=-1&amp;&amp;!hitshock) {facing=left;}
if (!place_free(x,y+1)) {onground=true;}
else {onground=false;}
if (vspeed&gt;0) {going=down;}
else if (vspeed&lt;0) {going=up;}
else {going=nowhere;}

//When you initially collide with the water
if (place_meeting(x,y,water)&amp;&amp;inwater==false) 
{   
    in=liquid; inwater=true; 
    speedxmax/=speeddivide; 
    vspeed/=vspeeddivide; 
    grav/=gravdivide; 
    jumpspeed/=jumpspeeddivide; 
    vspeedmax/=maxvspeeddivide;
    instance_create(x+speedx,y,obj_splash);
}
//When exit the water
else if (!place_meeting(x,y,water)&amp;&amp;inwater==true) 
{
    in=freespace; inwater=false; 
    speedxmax*=speeddivide; 
    vspeed*=hopout; 
    grav*=gravdivide 
    jumpspeed*=jumpspeeddivide; 
    vspeedmax*=maxvspeeddivide;
}

//*******************************************************************\\
//***********************SPRITE CHANGING BELOW***********************\\
//*******************************************************************\\


// Sprite changes for when you're NOT in the air and NOT moving \\
if (speedx==0&amp;&amp;onground&amp;&amp;move=0&amp;&amp;!hitshock) 
{
if (facing==right) {sprite_index=spr_right_still;    image_speed=0.25;}
else if (facing==left) {sprite_index=spr_left_still; image_speed=0.25;}
}



// Sprite changes for when you're NOT in the air and moving \\
if (speedx!=0&amp;&amp;onground&amp;&amp;!hitshock) 
{
if (facing==right)     {sprite_index=spr_right; image_speed=0.5;}
else if (facing==left) {sprite_index=spr_left;  image_speed=0.5;}
if (facing==right&amp;&amp;move==2&amp;&amp;continuesprite==-1&amp;&amp;abs(speedx)&gt;speedxmax/1.8) 
{sprite_index=spr_right_toleft; image_speed=0.5; facing=left ; continuesprite=sprite_index; image_index=0;}
else if (facing==left&amp;&amp;move==1&amp;&amp;continuesprite==-1&amp;&amp;abs(speedx)&gt;speedxmax/1.8)  
{sprite_index=spr_left_toright; image_speed=0.5; facing=right; continuesprite=sprite_index; image_index=0;}
}

// Sprite changes for when you're in the air \\
if (!onground&amp;&amp;!inwater&amp;&amp;!hitshock) 
{
if      (facing==right&amp;&amp;going==up)   {sprite_index=spr_right_up;   image_speed=0;}
else if (facing==right&amp;&amp;going==down) {sprite_index=spr_right_down; image_speed=0;}
if      (facing==left&amp;&amp;going==up)    {sprite_index=spr_left_up;    image_speed=0;}
else if (facing==left&amp;&amp;going==down)  {sprite_index=spr_left_down;  image_speed=0;}
}

// Sprite changes for when you're in WATER and NOT on the ground
if (!onground&amp;&amp;inwater&amp;&amp;!hitshock)
{
if (facing==left&amp;&amp;sprite_index==spr_right_swim)       {sprite_index=spr_left_swim; image_speed=0.5;}
else if (facing==right&amp;&amp;sprite_index==spr_left_swim)  {sprite_index=spr_right_swim;  image_speed=0.5;}
if (facing==right&amp;&amp;sprite_index!=spr_right_swim)      {sprite_index=spr_right_water; image_speed=0.5;}
else if (facing==left&amp;&amp;sprite_index!=spr_left_swim)   {sprite_index=spr_left_water;  image_speed=0.5;}
}

//*******************************************************************\\
//***********************SPRITE CHANGING ABOVE***********************\\
//*******************************************************************\\



//Quit the turning animation if some things don't fit\\
if (!onground) {continuesprite=-1;}
else if (facing==right&amp;&amp;move==2) {continuesprite=-1;}
else if (facing==left&amp;&amp;move==1) {continuesprite=-1;}
if (continuesprite&gt;-1) 
{sprite_index=continuesprite; image_speed=0.5; 
if (facing==left) {if speedx&lt;0 {speedx=0;}} 
if (facing==right) {if speedx&gt;0 {speedx=0;}}}




// The actual movement \\
if (place_free(x+speedx,y)) {x+=speedx;}
else 
{
if (trans86E=false)
{
if (speedx&gt;0) {move_contact_solid(0  , speedx); speedx=0;}
if (speedx&lt;0) {move_contact_solid(180,-speedx); speedx=0;}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Invincibility</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (going==down or going==nowhere) {cantbehit=false;}

hitshock=hit
if (hit&amp;&amp;invins=0) 
{
if (facing==right) {sprite_index=spr_right_knockback; image_index=0; image_speed=0.5;}
if (facing==left) {sprite_index=spr_left_knockback; image_index=0; image_speed=0.5;}
vspeed=-4;
invins=invins_max;
}
else if (!place_free(x,y+1)) {hit=false;}
else if (inwater&amp;&amp;vspeed&gt;0) {hit=false;}

//Blinking when invinsible
if (invins&gt;0&amp;&amp;visibl==true) {visibl=false;}
else if (invins&gt;0&amp;&amp;visibl==false) {visibl=true;}

if (invins&gt;0) {invins-=1;}
if (invins==0) {visibl=true;}

// Limiting the HP
if (hp&gt;hpmax) {hp=hpmax;}
if (hp&lt;0) {hp=0;}

if (!place_free(x,y+1)) {canbehit=false;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Leveling up</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (expcurrent&gt;=expmax)
{
for (i=0; i&gt;-1; i+=1)
{
if expcurrent&gt;=expmax 
{
    expcurrent-=expmax;
    level+=1;
    
    //This is the EXPmax increasing formula. Feel free to change it.
    expmax+=round((expmax/1+(level/32))/(3.5+expmax/1500))
    
    //Type in some code here, this is what will happen whenever you level up.
    //For example, I could type in: hpmax += 10;
    //What that would do is increase my max HP by 10 points everytime I level up..
    hpmax += 10;
    hp=hpmax;
    
    
}
if expcurrent&lt;expmax {i=-4;}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ROOM CHANGING</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (going_to_next_room&amp;&amp;current_room=room) 
{room_goto_next(); instance_create(view_xview,view_yview,room_transition);}
else if (going_to_next_room&amp;&amp;current_room!=room) 
{going_to_next_room=false; x=obj_spawn_right.x; trans86E=false; while (!place_free(x,y)) {y-=1;}}

if (going_to_prev_room&amp;&amp;current_room=room) 
{room_goto_previous(); instance_create(view_xview,view_yview,room_transition);}
else if (going_to_prev_room&amp;&amp;current_room!=room) 
{going_to_prev_room=false; x=obj_spawn_left.x; trans86E=false;}

current_room=room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Hurting enemy</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//IF YOU DON'T LIKE THE CURRENT ENEMY COLLISION CODE, MODIFY IT A LITTLE, OR REMOVE IT AND ADD YOUR OWN.
// JUST REMEMBER THESE THINGS:
    // hit=true //TYPE THIS IN WHEN YOU WANT THE PLAYER TO TURN INVINSIBLE.
    // if (!hit) //TYPE THIS IN TO CHECK IF THE PLAYER HAS ALREADY BEEN HIT BEFORE HITTING HIM AGAIN
    // hp-=other.strength //TYPE THIS IN TO HURT THE PLAYER BY THE ENEMIES STRENGTH.

//This is for when you hit the enemy
if (vspeed&gt;=0&amp;&amp;place_free(x,y+1)&amp;&amp;place_meeting(x,y+vspeed,other)&amp;&amp;!hit&amp;&amp;!keyboard_check(keydown)&amp;&amp;!inwater) {other.hp-=2; vspeed=-8; other.vspeed+=4; cantbehit=true;}

//This is for when the enemy hits you
else if (vspeed&lt;=0) or (keyboard_check(keydown) or (inwater))
{
if (!hit&amp;&amp;invins=0&amp;&amp;!cantbehit)
{
// Telling the program that the player was hit
hit=true;
// Decreasing the players HP by the enemies defined strength.
hp-=other.strength;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Increasing the players score
playerscore+=100; 
//Destroying the other instance in the collision
with (other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Rounding out the y position in an attempt to remove any possible y-pixel offset.
y=round(y)
//Moving to the nearest solid contact
move_contact_solid(direction,abs(vspeedmax)+1);
//Resetting the vspeed to 0
vspeed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_prev_room">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!going_to_next_room)
{
going_to_prev_room=true;
trans86E=true;
came_from=right;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_next_room">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!going_to_prev_room)
{
going_to_next_room=true;
trans86E=true;
came_from=left;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is all just for proper sprite changing.
if (sprite_index==continuesprite) {continuesprite=-1; image_index=image_number-1; speedx=0;}
if (sprite_index==spr_right_swim)      {sprite_index=spr_right_water; image_index=0; }
else if (sprite_index==spr_left_swim)  {sprite_index=spr_left_water; image_index=0; }

if (sprite_index==spr_right_knockback)||(sprite_index==spr_left_knockback) {image_index=image_number-1; image_speed=0;} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visibl==true) {draw_sprite(sprite_index,floor(image_index),x,y);}

//Drawing the health
draw_sprite(spr_HUD,0,view_xview,view_yview);
draw_sprite(spr_hp_bar,0,view_xview+3,view_yview+3);
draw_sprite(spr_exp_bar,0,view_xview+3,view_yview+39);
draw_sprite_stretched(spr_hp_fill,0,view_xview+54,view_yview+12,hp/hpmax*hpscale,14);
draw_sprite_stretched(spr_exp_fill,0,view_xview+54,view_yview+39+9,expcurrent/expmax*expscale,14);

draw_set_font(Health);
draw_set_halign(true)
draw_text((view_xview+54)+hpscale/2,view_yview+11,string(hp));
draw_text((view_xview+54)+expscale/2,view_yview+39+8,string(expcurrent));
draw_set_halign(false)
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
